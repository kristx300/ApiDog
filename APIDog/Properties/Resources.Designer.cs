//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace APIDog.Properties {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("APIDog.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap all {
            get {
                object obj = ResourceManager.GetObject("all", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap cancel {
            get {
                object obj = ResourceManager.GetObject("cancel", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap circle {
            get {
                object obj = ResourceManager.GetObject("circle", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на using System;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Net;
        ///using System.Text;
        ///
        ///namespace HttpGenerate
        ///{
        ///    public class WebRequestGenerate
        ///    {
        ///        private HttpWebRequest Request { get; set; }
        ///        public string NotGet(string url, string data, string method)
        ///        {
        ///            Request = (HttpWebRequest)WebRequest.Create(url);
        ///            byte[] buf = Encoding.UTF8.GetBytes(data);
        ///
        ///            Request.Method = method;
        ///            Request.ContentType = &quot;application/x-www- [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string clear {
            get {
                return ResourceManager.GetString("clear", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap copy {
            get {
                object obj = ResourceManager.GetObject("copy", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap dog {
            get {
                object obj = ResourceManager.GetObject("dog", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на using System;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Net;
        ///using System.Text;
        ///
        ///namespace HttpGenerate
        ///{
        ///    public class WebRequestGenerate
        ///    {
        ///        private HttpWebRequest Request { get; set; }
        ///        private CookieContainer CookieBox { get; set; } = new CookieContainer();
        ///        public string NotGet(string url, string data, string method, WebHeaderCollection headers)
        ///        {
        ///            Request = (HttpWebRequest)WebRequest.Create(url);
        ///            Request.CookieContainer =  [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string full {
            get {
                return ResourceManager.GetString("full", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap head {
            get {
                object obj = ResourceManager.GetObject("head", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на using System;
        ///using System.Collections.Generic;
        ///using System.Net.Http;
        ///using System.Threading.Tasks;
        ///
        ///namespace HttpGenerate
        ///{
        ///    public class HttpClientGenerate : IDisposable
        ///    {
        ///        private HttpClient HttpClient { get; set; }
        ///
        ///        public async Task&lt;string&gt; NotGet(string url, string data, string method)
        ///        {
        ///            var values = new Dictionary&lt;string, string&gt;();
        ///            foreach (var item in data.Split(&apos;&amp;&apos;))
        ///            {
        ///                string[] val = item.Split(&apos;=&apos;) [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string http {
            get {
                return ResourceManager.GetString("http", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap project {
            get {
                object obj = ResourceManager.GetObject("project", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Поиск локализованного ресурса типа System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap request {
            get {
                object obj = ResourceManager.GetObject("request", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на using System;
        ///using System.Collections.Specialized;
        ///using System.Net;
        ///using System.Text;
        ///
        ///namespace HttpGenerate
        ///{
        ///    public class WebClientGenerate : IDisposable
        ///    {
        ///        private WebClient WebClient { get; set; } = new WebClient();
        ///
        ///        public string NotGet(string url, string data, string method)
        ///        {
        ///            var values = new NameValueCollection();
        ///            foreach (var item in data.Split(&apos;&amp;&apos;))
        ///            {
        ///                string[] val = item.Split(&apos;=&apos;);
        ///             [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string web {
            get {
                return ResourceManager.GetString("web", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на using System;
        ///using System.IO;
        ///using System.Linq;
        ///using System.Net;
        ///using System.Text;
        ///
        ///namespace HttpGenerate
        ///{
        ///    public class WebRequestGenerate
        ///    {
        ///        private HttpWebRequest Request { get; set; }
        ///        public string NotGet(string url, string data, string method, WebHeaderCollection headers)
        ///        {
        ///            Request = (HttpWebRequest)WebRequest.Create(url);
        ///            byte[] buf = Encoding.UTF8.GetBytes(data);
        ///
        ///            Request.Method = method;
        ///            Request.Cont [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string withoutcookie {
            get {
                return ResourceManager.GetString("withoutcookie", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на using System.IO;
        ///using System.Net;
        ///using System.Text;
        ///
        ///namespace HttpGenerate
        ///{
        ///    public class WebRequestGenerate
        ///    {
        ///        private HttpWebRequest Request { get; set; }
        ///        private CookieContainer CookieBox { get; set; } = new CookieContainer();
        ///
        ///        public string NotGet(string url, string data, string method)
        ///        {
        ///            Request = (HttpWebRequest)WebRequest.Create(url);
        ///            Request.CookieContainer = CookieBox;
        ///            byte[] buf = Encoding.UTF8.GetBytes(da [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string withoutheader {
            get {
                return ResourceManager.GetString("withoutheader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на using System;
        ///using System.Collections.Generic;
        ///using System.Net.Http;
        ///using System.Threading.Tasks;
        ///
        ///namespace HttpGenerate
        ///{
        ///    public class HttpClientGenerate : IDisposable
        ///    {
        ///        private HttpClient HttpClient { get; set; }
        ///
        ///        public async Task&lt;string&gt; NotGet(string url, string data, string method)
        ///        {
        ///            var values = new Dictionary&lt;string, string&gt;();
        ///            foreach (var item in data.Split(&apos;&amp;&apos;))
        ///            {
        ///                string[] val = item.Split(&apos;=&apos;) [остаток строки не уместился]&quot;;.
        /// </summary>
        internal static string withoutpatch {
            get {
                return ResourceManager.GetString("withoutpatch", resourceCulture);
            }
        }
    }
}
